#!/bin/env python
#
## Cleanup add_times files

import re
import sys

def cleanup_times(filepath):
  """Make backup of file and then cleanup entries for review."""
  prev_entry = None
  prev_date = None
  cur_date = None
  entries = {}
  with open(filepath, 'r') as f:
    for line in f.readlines():
      line = line.strip()
      if re.match(r'^(Alan|\s*)$', line, re.IGNORECASE):
        continue
      elif re.match(r'^#\d\d/\d\d$', line):
        if not prev_date:
          prev_date = line
        cur_date = line
        if cur_date not in entries:
          entries[cur_date] = []
      r = re.match(r'^(\d{4})\s+(\S+)$', line)
      if r:
        if prev_entry:
          if cur_date == prev_date:
            if r.group(1) < prev_entry[0]:
              # Invalid entry
              print('ERROR: Invalid entry near: "{}"'.format(line), file=sys.stderr)
            else:
              entries[cur_date].append(
                '{} {} {}'.format(prev_entry[0], r.group(1), prev_entry[1]))
          else:
            if r.group(1) == '0000':
              entries[prev_date].append(
                '{} {} {}'.format(prev_entry[0], r.group(1), prev_entry[1]))
            else:
              entries[prev_date].append(
                '{} {} {}'.format(prev_entry[0], '0000', prev_entry[1]))
              entries[cur_date].append(
                '{} {} {}'.format('0000', r.group(1), prev_entry[1]))
            prev_date = cur_date
        prev_entry = r.groups()
  for k, v in sorted(entries.items()):
    print(k)
    for e in v:
      print(e)
    print('')

if __name__ == '__main__':
  args = list(sys.argv)
  args.pop(0)
  if args:
    cleanup_times(args.pop(0))
  else:
    print('Please provide filename')
    sys.exit(1)

