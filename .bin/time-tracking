#!/bin/env python
#
## Time Tracking tool

import datetime
import os
import re
import subprocess
import sys
import time

# STATIC VARIABLES
ACTIVITIES = {
  'ドム':       {'Desc': '飲む',        'Group': '独学',    'TimeW': 'Dokugaku'},
  '分類':       {'Desc': '分類',        'Group': '独学',    'TimeW': 'Dokugaku'},
  '喫茶店':     {'Desc': '喫茶店',      'Group': '独学',    'TimeW': 'Dokugaku'},
  '日本語':     {'Desc': '日本語',      'Group': '独学',    'TimeW': 'Dokugaku'},
  '独学':       {'Desc': '何',          'Group': '独学',    'TimeW': 'Dokugaku'},
  '研究':       {'Desc': '研究',        'Group': '独学',    'TimeW': 'Dokugaku'},
  '読む':       {'Desc': '読む',        'Group': '独学',    'TimeW': 'Dokugaku'},
  'コーヒー':   {'Desc': 'コーヒー',    'Group': '元気',    'TimeW': 'Genki'},
  '元気':       {'Desc': '何',          'Group': '元気',    'TimeW': 'Genki'},
  '散髪':       {'Desc': '散髪',        'Group': '元気',    'TimeW': 'Genki'},
  '料理':       {'Desc': '料理',        'Group': '元気',    'TimeW': 'Genki'},
  '歩く':       {'Desc': '歩く',        'Group': '元気',    'TimeW': 'Genki'},
  '準備':       {'Desc': '準備',        'Group': '元気',    'TimeW': 'Genki'},
  '運動':       {'Desc': '運動',        'Group': '元気',    'TimeW': 'Genki'},
  'クンダ':     {'Desc': 'クンダ',      'Group': '働く',    'TimeW': 'Hataraku'},
  'ザック':     {'Desc': 'ザック',      'Group': '働く',    'TimeW': 'Hataraku'},
  'ブランドン': {'Desc': 'ブランドン',  'Group': '働く',    'TimeW': 'Hataraku'},
  '働く':       {'Desc': '何',          'Group': '働く',    'TimeW': 'Hataraku'},
  '十二':       {'Desc': '十二',        'Group': '働く',    'TimeW': 'Hataraku'},
  '人民':       {'Desc': '何',          'Group': '人民',    'TimeW': 'Jinmin'},
  '友達':       {'Desc': '友達',        'Group': '人民',    'TimeW': 'Jinmin'},
  '家族':       {'Desc': '家族',        'Group': '人民',    'TimeW': 'Jinmin'},
  '何':         {'Desc': '何',          'Group': 'ミスク',  'TimeW': 'Nani'},
  '作る':       {'Desc': '作る',        'Group': 'ミスク',  'TimeW': 'Nani'},
  '寝る':       {'Desc': '寝る',        'Group': '寝る',    'TimeW': 'Neru'},
  '飲む':       {'Desc': '飲む',        'Group': '楽しい',  'TimeW': 'Nomu'},
  '飲み屋':     {'Desc': '飲み屋',      'Group': '楽しい',  'TimeW': 'Nomu'},
  '旅行':       {'Desc': '何',          'Group': '旅行',    'TimeW': 'Ryokou'},
  '運転':       {'Desc': '運転',        'Group': '旅行',    'TimeW': 'Ryokou'},
  'お金':       {'Desc': 'お金',        'Group': '成人',    'TimeW': 'Seijin'},
  '成人':       {'Desc': '何',          'Group': '成人',    'TimeW': 'Seijin'},
  '掃除':       {'Desc': '掃除',        'Group': '成人',    'TimeW': 'Seijin'},
  '洗濯':       {'Desc': '洗濯',        'Group': '成人',    'TimeW': 'Seijin'},
  '裁縫':       {'Desc': '裁縫',        'Group': '成人',    'TimeW': 'Seijin'},
  '買い物':     {'Desc': '買い物',      'Group': '成人',    'TimeW': 'Seijin'},
  '銀行':       {'Desc': '銀行',        'Group': '成人',    'TimeW': 'Seijin'},
  '寿司':       {'Desc': '寿司',        'Group': '食べる',  'TimeW': 'Taberu'},
  '料理屋':     {'Desc': '料理屋',      'Group': '食べる',  'TimeW': 'Taberu'},
  '食べる':     {'Desc': '何',          'Group': '食べる',  'TimeW': 'Taberu'},
  '鶏肉':       {'Desc': '鶏肉',        'Group': '食べる',  'TimeW': 'Taberu'},
  'アニメ':     {'Desc': 'アニメ',      'Group': '楽しい',  'TimeW': 'Tanoshii'},
  'ゲーム':     {'Desc': 'ゲーム',      'Group': '楽しい',  'TimeW': 'Tanoshii'},
  '楽しい':     {'Desc': '何',          'Group': '楽しい',  'TimeW': 'Tanoshii'},
  '映画':       {'Desc': '映画',        'Group': '楽しい',  'TimeW': 'Tanoshii'},
  }
COLORS = {
  'CLEAR':  '\033[0m',
  'RED':  '\033[31m',
  'ORANGE': '\033[31;1m',
  'GREEN':  '\033[32m',
  'YELLOW': '\033[33m',
  'BLUE':   '\033[34m',
  'CYAN':   '\033[36m',
  }

# REGEX
REGEX_DATE = r'^#(\d{4})?[-/]?(\d{2})[-/](\d{2})$'

def abort(msg='Aborted'):
  """Print error message and exit"""
  print(msg, file=sys.stderr)
  sys.exit(1)

def add_entries(entries):
  """Add entries and show progress."""
  cur_day = entries[0]['Start'].day

  # Always print date for first entry
  print(entries[0]['Start'].strftime('%Y-%m-%d'))

  for e in entries:
    if cur_day != e['Start'].day:
      # Print new date
      print('\n' + e['Start'].strftime('%Y-%m-%d'))
      cur_day = e['Start'].day

    # Add entry
    add_entry(e)

def add_entry(entry):
  """Add entry to both Toggl and TimeWarrior."""
  act = ACTIVITIES[entry['Name']]
  if act:
    print('  {_start} - {_end}: {Desc:　<4} @{Group}'.format(
      _start=entry['Start'].strftime('%H:%M'),
      _end=entry['End'].strftime('%H:%M'),
      **act))

  # TimeWarrior
  cmd = [
    'timew', 'track', act['TimeW'],
    entry['Start'].strftime('%Y-%m-%dT%H:%M'), '-',
    entry['End'].strftime('%Y-%m-%dT%H:%M')]
  run_cmd(cmd)

  # Toggl
  cmd = [
    'toggl', 'add',
    act['Desc'], '@{}'.format(act['Group']),
    entry['Start'].strftime('%Y-%m-%dT%H:%M'),
    entry['End'].strftime('%Y-%m-%dT%H:%M')]
  run_cmd(cmd)

def ask(prompt='Kotaero!'):
    """Prompt the user with a Y/N question, log answer, and return a bool."""
    answer = None
    prompt = '{} [Y/N]: '.format(prompt)
    while answer is None:
        tmp = input(prompt)
        if re.search(r'^y(es|)$', tmp, re.IGNORECASE):
            answer = True
        elif re.search(r'^n(o|ope|)$', tmp, re.IGNORECASE):
            answer = False
    message = '{prompt}{answer_text}'.format(
        prompt = prompt,
        answer_text = 'Yes' if answer else 'No')
    return answer

def check_times(entries):
  """Check entries for invalid names, overlapping times, etc."""
  entries = list(entries)
  prev = entries.pop(0)
  errors = False
  while entries:
    cur = entries.pop(0)
    try:
      if cur['Start'] > cur['End']:
        raise Exception('Invalid entry: {} - {}: {}'.format(
          cur['Start'].strftime('%Y-%m-%d: %H:%M'),
          cur['End'].strftime('%H:%M'),
          cur['Name']))
      if cur['Start'].day == prev['Start'].day and cur['Start'] < prev['End']:
        raise Exception('Overlapping times near {} - {}: {}'.format(
          cur['Start'].strftime('%Y-%m-%d: %H:%M'),
          cur['End'].strftime('%H:%M'),
          cur['Name']))
      if prev['Name'] not in ACTIVITIES:
        raise Exception('Unrecognized activity: {Name}'.format(**prev))
    except Exception as err:
      print_error(err)
      errors = True
    prev = cur
  if errors:
    sys.exit(1)

def convert_times(start_date, start_time, end_time):
  """Convert times to datetime objects, returns tuple."""
  fmt = '%Y%m%d%H%M'
  start_date = get_date(start_date)
  end_date = start_date
  if end_time == '0000':
    end_date = start_date + datetime.timedelta(days=1)

  try:
    start_datetime = datetime.datetime.strptime(
      '{}{}'.format(start_date.strftime('%Y%m%d'), start_time),
      fmt)
    end_datetime = datetime.datetime.strptime(
      '{}{}'.format(end_date.strftime('%Y%m%d'), end_time),
      fmt)
  except ValueError:
    abort('Invalid time entry {}: {} - {}'.format(
      start_date.strftime('%Y-%m-%d'),
      start_time,
      end_time))

  return (start_datetime, end_datetime)

def cleanup_times(filepath):
  """Read input file and cleanup entries, returns list."""
  prev_entry = None
  prev_date = None
  cur_date = None
  entries = []

  # Parse file
  with open(filepath, 'r') as f:
    for line in f.readlines():
      line = line.strip()
      if re.match(r'^(Alan|\s*)$', line, re.IGNORECASE):
        continue
      elif re.match(REGEX_DATE, line):
        # Found date
        if not prev_date:
          prev_date = line
        cur_date = line
      r = re.match(r'^(\d{4})\s+(\S+)$', line)
      if not r:
        # Invalid line print warnings
        if line and not line.startswith('#'):
          # Only print warnings for non-empty lines
          print_error('Invalid line: {}'.format(line))
      else:
        # Found entry
        if prev_entry:
          if cur_date == prev_date:
            _start, _end = convert_times(cur_date, prev_entry[0], r.group(1))
            _name = prev_entry[1]
            entries.append({
              'Start':  _start,
              'End':    _end,
              'Name':   _name,
              })
          else:
            _name = prev_entry[1]
            # Ending previous day
            if r.group(1) == '0000':
              _start, _end = convert_times(prev_date, prev_entry[0], r.group(1))
              entries.append({
                'Start':  _start,
                'End':    _end,
                'Name':   _name,
                })
            else:
              # Ending previous day
              _start, _end = convert_times(prev_date, prev_entry[0], '0000')
              entries.append({
                'Start':  _start,
                'End':    _end,
                'Name':   _name,
                })
              # Starting new day
              _start, _end = convert_times(cur_date, '0000', r.group(1))
              entries.append({
                'Start':  _start,
                'End':    _end,
                'Name':   _name,
                })
            # Update cur_date since a new day has started
            prev_date = cur_date
        # Update prev_entry for next iteration
        prev_entry = r.groups()

  # Done
  return entries

def get_date(line):
  """Get datetime object from line, returns datetime obj."""
  if not line:
    raise Exception('Invalid date: {}'.format(line))
  new_date = None
  r = re.match(REGEX_DATE, line)
  if r:
    year = r.group(1)
    if not year:
      year = time.localtime().tm_year
    new_date = datetime.datetime(int(year), int(r.group(2)), int(r.group(3)))
  return new_date

def print_error(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def print_times(entries):
  """Print entries for review."""
  cur_day = entries[0]['Start'].day
  cur_day_total = datetime.timedelta(0)

  # Always print date for first entry
  print(entries[0]['Start'].strftime('%Y-%m-%d (%A)'))

  for e in entries:
    if cur_day != e['Start'].day:
      # Print previous dates total and new date
      print('  {:14} {:　<4} ({} Total)'.format('', '', cur_day_total))
      print(e['Start'].strftime('%Y-%m-%d (%A)'))
      cur_day = e['Start'].day
      cur_day_total = datetime.timedelta(0)

    # Print entry
    color = 'CLEAR'
    time_diff = e['End'] - e['Start']
    if e['Name'] == '寝る':
      color = 'BLUE'
    elif (time_diff.seconds / 60**2) > 6:
      color = 'RED'
    elif (time_diff.seconds / 60**2) > 4:
      color = 'YELLOW'
    print('  {} - {}: {}{:　<4} ({}){}'.format(
      e['Start'].strftime('%H:%M'),
      e['End'].strftime('%H:%M'),
      COLORS[color],
      e['Name'],
      time_diff,
      COLORS['CLEAR']))
    cur_day_total += time_diff

  # Always print total for last date
  print('  {:14} {:　<4} ({} Total)'.format('', '', cur_day_total))

def run_cmd(cmd):
  """Run command and show error(s) if they occur."""
  result = subprocess.run(
    cmd, check=False,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)
  if result.returncode != 0:
    print(result.stderr.decode())

if __name__ == '__main__':
  args = list(sys.argv)
  args.pop(0)
  if args:
    entries = cleanup_times(args.pop(0))
    check_times(entries)
    print_times(entries)
    if ask('Add above entries to time trackers?'):
      add_entries(entries)
    else:
      abort()
  else:
    abort('Please provide filename')

